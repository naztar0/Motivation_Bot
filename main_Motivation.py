#!/usr/bin/env python
from aiogram import Bot, Dispatcher, executor, types, utils
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import mysql.connector
import constants as c
from notificator import loop_schedule

bot = Bot(c.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    func_elem_role = State()
    data = State()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def select_answers(message):
    # —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    answers = "*1.* _–í–æ—Å–ø–∏—Ç—ã–≤–∞—é –¥–µ—Ç–µ–π –¥–æ–º–∞_\n" \
              "*2.* _–†–∞–±–æ—Ç–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ –∫–∞–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫_\n" \
              "*3.* _–Ø –ø–æ–∫–∞ –±–µ–∑ —Ä–∞–±–æ—Ç—ã, —Ö–æ—á—É –∑–∞–Ω—è—Ç—å—Å—è —Å–æ–±–æ–π!_\n" \
              "*4.* _–Ø –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è_\n" \
              "*5.* _–†–∞–±–æ—Ç–∞—é –∏ —É–¥–∞–ª–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤_\n" \
              "*6.* _–°—Ç—É–¥–µ–Ω—Ç, —É—á—É—Å—å –∏ –æ—Å–≤–∞–∏–≤–∞—é –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è_\n" \
              "*7.* _–ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ_\n" \
              "*8.* _–ó–∞–Ω—è—Ç –≤ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞_"
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    key = types.InlineKeyboardMarkup()
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ, –≤—Ç–æ—Ä–æ–π –∑–∞ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º –±—É–¥–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å
    but_1 = types.InlineKeyboardButton("1", callback_data="mom_with_children")
    but_2 = types.InlineKeyboardButton("2", callback_data="remote_admin")
    but_3 = types.InlineKeyboardButton("3", callback_data="unemployed")
    but_4 = types.InlineKeyboardButton("4", callback_data="self_employed")
    but_5 = types.InlineKeyboardButton("5", callback_data="remote_top")
    but_6 = types.InlineKeyboardButton("6", callback_data="remote_student")
    but_7 = types.InlineKeyboardButton("7", callback_data="other")
    but_8 = types.InlineKeyboardButton("8", callback_data="worker")
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ—Ä—è–¥–æ–∫ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ –≤ –∫–æ–¥–µ
    key.add(but_1, but_2, but_3)
    key.add(but_4, but_5, but_6)
    key.add(but_7, but_8)
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n\n"
                         "–°–≤–æ–π –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.\n\n" + answers, reply_markup=key, parse_mode="Markdown")


# –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    try:
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–ü—Ä–∏–≤–µ—Ç!üòâ \n\n–ú–µ–ª–∫–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–π–¥—É—Ç –≤ –ø—Ä–∏–≤—ã—á–∫—É –∏ –æ–∫–∞–∂—É—Ç –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ "
                             "—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Ö –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n\n–Ø –±—É–¥—É —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å "
                             "–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.")
        # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
        await select_answers(message)
    except utils.exceptions.BotBlocked: pass


# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
async def select_notifications(callback_query, answer, message_id=None):
    n = c.notifications
    notes = []
    # –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å notes –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è notifications –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
    if answer == "mom_with_children":
        notes.append({3: n[3], 4: n[4], 5: n[5], 9: n[9], 11: n[11], 12: n[12]})
    elif answer == "remote_admin":
        notes.append({1: n[1], 3: n[3], 4: n[4], 5: n[5], 7: n[7], 8: n[8], 9: n[9], 10: n[10], 11: n[11], 12: n[12]})
    elif answer == "unemployed":
        notes.append({3: n[3], 4: n[4], 5: n[5], 8: n[8], 9: n[9], 11: n[11], 12: n[12]})
    elif answer == "self_employed":
        notes.append({3: n[3], 4: n[4], 5: n[5], 8: n[8], 9: n[9], 11: n[11], 12: n[12]})
    elif answer == "remote_top":
        notes.append({1: n[1], 3: n[3], 4: n[4], 5: n[5], 6: n[6], 7: n[7], 8: n[8], 9: n[9], 10: n[10], 11: n[11], 12: n[12]})
    elif answer == "remote_student":
        notes.append({1: n[1], 3: n[3], 4: n[4], 6: n[6], 8: n[8], 9: n[9], 10: n[10], 11: n[11], 12: n[12]})
    elif answer == "other":
        notes.append({1: n[1], 3: n[3], 4: n[4], 5: n[5], 6: n[6], 7: n[7], 8: n[8], 9: n[9], 10: n[10], 11: n[11], 12: n[12]})
    elif answer == "worker":
        notes.append({1: n[1], 3: n[3], 4: n[4], 5: n[5], 6: n[6], 7: n[7], 8: n[8], 9: n[9], 10: n[10], 11: n[11], 12: n[12]})
    key = types.InlineKeyboardMarkup()
    conn = mysql.connector.connect(host=c.host, user=c.db_user, passwd=c.password, database=c.db_name)
    cursor = conn.cursor(buffered=True)
    selectExistsQuery = "SELECT EXISTS (SELECT ID FROM notifications WHERE user_id=(%s))"
    selectQuery = "SELECT {} FROM notifications WHERE user_id=(%s)"
    insertUserQuery = "INSERT INTO notifications(user_id) VALUES(%s)"
    setDefaultQuery = "UPDATE notifications SET {}=0 WHERE user_id=(%s)"
    updateQuery = "UPDATE notifications SET {}=1 WHERE user_id=(%s)"

    if message_id is None:
        cursor.execute(selectExistsQuery, [callback_query.message.chat.id])
        exist = cursor.fetchone()[0]
        if exist == 0:
            cursor.execute(insertUserQuery, [callback_query.message.chat.id])
        for note in c.notifications:
            cursor.execute(setDefaultQuery.format('n' + str(note)), [callback_query.message.chat.id])
        for note in notes[0]:
            cursor.execute(updateQuery.format('n' + str(note)), [callback_query.message.chat.id])
        conn.commit()
    # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for note in notes[0]:
        cursor.execute(selectQuery.format('n' + str(note)), [callback_query.message.chat.id])
        getNote = cursor.fetchone()[0]
        if getNote == 1:
            key.add(types.InlineKeyboardButton(str("‚úÖ ") + str(notes[0][note]), callback_data=str(note)))
        else:
            key.add(types.InlineKeyboardButton(str("‚ùå ") + str(notes[0][note]), callback_data=str(note)))
    conn.close()
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –¥–≤—É—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    key.add(types.InlineKeyboardButton("üÜó –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="exit"))
    key.add(types.InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="retry_answer"))
    if message_id:
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (–≤–∫–ª./–≤—ã–∫–ª.)
        await bot.edit_message_reply_markup(callback_query.message.chat.id, message_id, reply_markup=key)
    else:
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∞—Ç—å –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–Ω–æ–≤–æ —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∫–µ –¥–æ–º–∞", reply_markup=key)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
async def confirm_answer(callback_query, answer, callback):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton("–î–∞, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data="insert_" + callback)
    but_2 = types.InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–≤–µ—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="retry_answer")
    key.add(but_1)
    key.add(but_2)
    await bot.send_message(callback_query.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç:\n_" + answer + "_\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?", reply_markup=key, parse_mode="Markdown")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query_handler(lambda callback_query: True)
async def callback_inline(callback_query: types.CallbackQuery):
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
    if callback_query.data == "retry_answer":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await select_answers(callback_query.message)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    elif callback_query.data == "mom_with_children":
        # answer - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, callback - –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ä–æ–ª–∏
        # –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∫–ª—é—á–∏ answer –∏ callback –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –≤ –ø–µ—Ä–≤–æ–º –æ–Ω–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        await confirm_answer(callback_query, answer="–í–æ—Å–ø–∏—Ç—ã–≤–∞—é –¥–µ—Ç–µ–π –¥–æ–º–∞", callback="mom_with_children")
    elif callback_query.data == "remote_admin":
        await confirm_answer(callback_query, "–†–∞–±–æ—Ç–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ –∫–∞–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "remote_admin")
    elif callback_query.data == "unemployed":
        await confirm_answer(callback_query, "–Ø –ø–æ–∫–∞ –±–µ–∑ —Ä–∞–±–æ—Ç—ã, —Ö–æ—á—É –∑–∞–Ω—è—Ç—å—Å—è —Å–æ–±–æ–π!", "unemployed")
    elif callback_query.data == "self_employed":
        await confirm_answer(callback_query, "–Ø –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —Å–µ–±—è", "self_employed")
    elif callback_query.data == "remote_top":
        await confirm_answer(callback_query, "–†–∞–±–æ—Ç–∞—é –∏ —É–¥–∞–ª–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "remote_top")
    elif callback_query.data == "remote_student":
        await confirm_answer(callback_query, "–°—Ç—É–¥–µ–Ω—Ç, —É—á—É—Å—å –∏ –æ—Å–≤–∞–∏–≤–∞—é –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è", "remote_student")
    elif callback_query.data == "other":
        await confirm_answer(callback_query, "–ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ", "other")
    elif callback_query.data == "worker":
        await confirm_answer(callback_query, "–ó–∞–Ω—è—Ç –≤ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞", "worker")

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î
    elif str(callback_query.data)[:7] == "insert_":
        answer = str(callback_query.data)[7:]
        conn = mysql.connector.connect(host=c.host, user=c.db_user, passwd=c.password, database=c.db_name)
        cursor = conn.cursor(buffered=True)
        existQuery = "SELECT EXISTS (SELECT ID FROM users WHERE user_id=(%s))"
        insertQuery = "INSERT INTO users (user_id, username, role) VALUES (%s, %s, %s)"
        updateQuery = "UPDATE users SET username=(%s), role=(%s) WHERE user_id=(%s)"
        cursor.execute(existQuery, [callback_query.message.chat.id])
        exist = cursor.fetchone()[0]
        if exist == 1: cursor.executemany(updateQuery, [(callback_query.from_user.username, answer, callback_query.message.chat.id)])
        else: cursor.executemany(insertQuery, [(callback_query.message.chat.id, callback_query.from_user.username, answer)])
        conn.commit()
        conn.close()
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await select_notifications(callback_query, answer)

    # –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –±–æ—Ç—É –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è), –±–æ—Ç –∑–∞–Ω–æ—Å–∏—Ç –æ—Ç–≤–µ—Ç –≤ –ë–î
    elif callback_query.data in {'1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'}:
        note = 'n' + str(callback_query.data)
        conn = mysql.connector.connect(host=c.host, user=c.db_user, passwd=c.password, database=c.db_name)
        cursor = conn.cursor(buffered=True)
        selectQuery = "SELECT {} FROM notifications WHERE user_id=(%s)"
        updateQuery = "UPDATE notifications SET {}=(%s) WHERE user_id=(%s)"
        selectRoleQuery = "SELECT role FROM users WHERE user_id=(%s)"
        cursor.execute(selectQuery.format(note), [callback_query.message.chat.id])
        result = cursor.fetchone()[0]
        if result == 1: cursor.executemany(updateQuery.format(note), [(0, callback_query.message.chat.id)])
        else: cursor.executemany(updateQuery.format(note), [(1, callback_query.message.chat.id)])
        conn.commit()
        cursor.execute(selectRoleQuery, [callback_query.message.chat.id])
        result = cursor.fetchone()[0]
        conn.close()
        await select_notifications(callback_query, result, callback_query.message.message_id)

    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä"
    elif callback_query.data == "exit":
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await bot.send_message(callback_query.message.chat.id, "–ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏! –¢–µ–ø–µ—Ä—å –º–Ω–µ —è—Å–µ–Ω —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω—è—Ç–∏–π –∏ —è –±—É–¥—É –≤—ã—Å—ã–ª–∞—Ç—å "
                                                               "—Ç–µ–±–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–∑–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–µ–ª–æ—á–∞—Ö. –ü—Ä–æ—Å—Ç–æ "
                                                               "—Å–ª–µ–¥—É–π –∏–º –∏ —Å–∫–æ—Ä–æ –∑–∞–º–µ—Ç–∏—à—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Çüí™\n\n–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å "
                                                               "–∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ "
                                                               "–ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /start")
        await bot.send_message(callback_query.message.chat.id, "–ï—Å–ª–∏ —è –±—É–¥—É —Å–∏–ª—å–Ω–æ –Ω–∞–≤—è–∑—á–∏–≤—ã–º —Å–æ —Å–≤–æ–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –æ—Ç–∫–ª—é—á–∏ –∑–≤—É–∫ –Ω–∞ –º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. "
                                                               "–ò–ª–∏ –ø—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç–∫–ª—é—á–∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")


# ======== –î–∞–ª—å—à–µ –∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ========
@dp.message_handler(commands=['admin'])
async def message_handler(message: types.Message):
    if message.chat.id == c.admin:
        await message.answer("/text\n/sticker\n/photo\n/video\n/poll")


@dp.message_handler(commands=['text'])
async def message_handler(message: types.Message, state: FSMContext):
    if message.chat.id == c.admin:
        await admin_choose_role(message, "—Ç–µ–∫—Å—Ç", state)


@dp.message_handler(commands=['sticker'])
async def message_handler(message: types.Message, state: FSMContext):
    if message.chat.id == c.admin:
        await admin_choose_role(message, "—Å—Ç–∏–∫–µ—Ä", state)


@dp.message_handler(commands=['photo'])
async def message_handler(message: types.Message, state: FSMContext):
    if message.chat.id == c.admin:
        await admin_choose_role(message, "—Ñ–æ—Ç–æ", state)


@dp.message_handler(commands=['video'])
async def message_handler(message: types.Message, state: FSMContext):
    if message.chat.id == c.admin:
        await admin_choose_role(message, "–≤–∏–¥–µ–æ", state)


@dp.message_handler(commands=['poll'])
async def message_handler(message: types.Message, state: FSMContext):
    if message.chat.id == c.admin:
        await admin_choose_role(message, "–æ–ø—Ä–æ—Å", state)


# –≤—ã–±–æ—Ä —Ä–æ–ª–∏
async def admin_choose_role(message, elem, state):
    await Form.func_elem_role.set()
    async with state.proxy() as data:
        data['func_elem_role'] = [elem, None]
    choices = "/mom_with_children\n/remote_admin\n/unemployed\n/self_employed\n/remote_top\n/remote_student\n/worker\n/ALL"
    await message.answer("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n\n" + choices)


@dp.message_handler(state=Form.func_elem_role)
async def admin_get_role(message: types.Message, state: FSMContext):
    role = str(message.text)[1:]
    async with state.proxy() as data:
        elem = data['func_elem_role'][0]
        data['func_elem_role'][1] = role
    if role not in {"mom_with_children", "remote_admin", "unemployed", "self_employed", "remote_top", "remote_student", "worker", "ALL"}:
        await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")
        await state.finish()
        return
    await Form.next()
    key = None
    if elem == "–æ–ø—Ä–æ—Å":
        key = types.ReplyKeyboardMarkup(resize_keyboard=True)
        key.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", request_poll=types.KeyboardButtonPollType()))
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å {elem} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=key)


def get_users(role):
    conn = mysql.connector.connect(host=c.host, user=c.db_user, passwd=c.password, database=c.db_name)
    cursor = conn.cursor(buffered=True)
    if role == "ALL":
        selectQuery = "SELECT user_id FROM users"
        cursor.execute(selectQuery)
    else:
        selectQuery = "SELECT user_id FROM users WHERE role=(%s)"
        cursor.execute(selectQuery, [role])
    users = cursor.fetchall()
    conn.close()
    return users


@dp.message_handler(content_types=['text', 'sticker', 'photo', 'video', 'poll'], state=Form.data)
async def admin_choose_func(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        func = data['func_elem_role'][0]
        role = data['func_elem_role'][1]
    await state.finish()

    if func == "—Ç–µ–∫—Å—Ç":
        await admin_send_text(message, role)
    elif func == "—Å—Ç–∏–∫–µ—Ä":
        await admin_send_sticker(message, role)
    elif func == "—Ñ–æ—Ç–æ":
        await admin_send_photo(message, role)
    elif func == "–≤–∏–¥–µ–æ":
        await admin_send_video(message, role)
    elif func == "–æ–ø—Ä–æ—Å":
        await admin_send_poll(message, role)


async def admin_send_text(message, role):
    try: text = message.text
    except AttributeError: return
    users = get_users(role)
    i = 0
    for user in users:
        try:
            await bot.send_message(user[0], text)
            i += 1
        except utils.exceptions.BotBlocked: pass
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: " + str(i))


async def admin_send_sticker(message, role):
    try: fileID = message.sticker.file_id
    except AttributeError: return
    users = get_users(role)
    i = 0
    for user in users:
        try:
            await bot.send_sticker(user[0], fileID)
            i += 1
        except utils.exceptions.BotBlocked: pass
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: " + str(i))


async def admin_send_photo(message, role):
    try: fileID = message.photo[-1].file_id
    except AttributeError: return
    except TypeError: return
    users = get_users(role)
    i = 0
    for user in users:
        try:
            await bot.send_photo(user[0], fileID)
            i += 1
        except utils.exceptions.BotBlocked: pass
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: " + str(i))


async def admin_send_video(message, role):
    try: fileID = message.video.file_id
    except AttributeError: return
    users = get_users(role)
    i = 0
    for user in users:
        try:
            await bot.send_video(user[0], fileID)
            i += 1
        except utils.exceptions.BotBlocked: pass
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: " + str(i))


async def admin_send_poll(message, role):
    users = get_users(role)
    i = 0
    for user in users:
        try:
            await bot.forward_message(user[0], message.chat.id, message.message_id)
            i += 1
        except utils.exceptions.BotBlocked: pass
    key = types.ReplyKeyboardRemove()
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: " + str(i), reply_markup=key)


if __name__ == '__main__':
    dp.loop.create_task(loop_schedule())
    executor.start_polling(dp, skip_updates=True)
